@using Microsoft.AspNetCore.Http
@using System.IO
@model IMSMIS.Models.Tasks

<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<link rel="stylesheet" href="~/css/Tasks.css">
	<script src="https://kit.fontawesome.com/a076d05399.js"></script>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css" rel="stylesheet">
	<script src="~/ckeditor/ckeditor.js"></script>
	<style>
		.comments table, .comments th, .comments td {
			border: 1px solid #000;
			padding: 8px;
		}
		.content-display {
			/* border: 1px solid #ddd; */
			padding: 10px;
			min-height: 200px;
			background-color: #f9f9f9;
		}
	</style>
	<style>
		 
		#editBtn {
			font-size: 25px;
		}

			#editBtn:hover {
				color: #0665F7;
			}

		#cancelbtn {
			border: 1px solid gray;
		}

			#cancelbtn:hover {
				border: 1px solid #0665F7;
			}

			#cancelbtn:focus {
				outline: none;
				font-weight: bold;
				box-shadow: none
			}

		#delete {
			font-size: 25px;
		}

			#delete:hover {
				color: #FC0606
			}

		.summary {
			outline: none;
			font-size: 26px;
			font-weight: bold;
			border: 1px solid #ced4da;
			background-color: #fff;
		}

			.summary:focus {
				outline: none;
				border: 1px solid #ced4da;
				box-shadow: none;
			}

		.description {
			min-height: 500px;
			outline: none;
			font-size: 18px;
			border: 1px solid #ced4da;
			font-weight: 500;
			background-color: #fff;
		}

			.description:focus {
				outline: none;
				border: 1px solid gray;
				box-shadow: none;
			}

		.form-control:focus, .form-select:focus {
			outline: none;
			border: 1px solid #ced4da;
			box-shadow: none;
		}

		.file-names-container {
			display: flex;
			flex-wrap: wrap;
		}

		.file-info {
			background-color: #fff;
			padding: 5px 10px;
			border: 1px solid gray;
			border-radius: 5px;
			margin-right: 5px;
			font-weight: 500;
			height: 5rem;
			width: 7rem;
			overflow: hidden;
			margin-bottom: 5px;
		}

		#myModal {
			display: none;
			position: fixed;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 70%;
			max-width: 500px;
			z-index: 9999;
			box-shadow: 0 400px 800px rgba(0, 0, 0, 0.2);
		}

		.modal-content {
			background-color: #fefefe;
			padding: 20px;
			border: 1px solid #888;
			border-radius: 5px;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
		}

		.modal-footer {
			padding: 10px;
		}

		.modal-title {
			margin-top: 0;
		}


		.modal-body {
			padding: 10px;
			padding-bottom: 20px;
			overflow-x: hidden;
		}

		.form-group {
			max-width: 300px;
			margin-right: auto;
		}

		.form-control {
			margin-top: 5px;
		}

			.form-control:focus {
				box-shadow: none;
			}

		.close {
			float: right;
		}

			.close:focus {
				box-shadow: none;
				border: none;
				outline: none;
			}

		input[type=number]::-webkit-inner-spin-button,
		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}

		input[type=number] {
			-moz-appearance: textfield;
		}

		#projectChanges div {
			padding: 10px;
		}

			#projectChanges div b {
				font-weight: bold;
				margin-right: 3px;
			}

			#projectChanges div span {
				color: black;
				font-size: 15px;
			}

			#projectChanges div .time {
				color: gray;
				font-size: small;
			}

		.projectChanges {
			border: 1px solid #F2F3F4;
			border-radius: 8px;
			padding: 20px;
			overflow-y: auto;
		}

			.projectChanges::-webkit-scrollbar {
				width: 5px;
			}

			.projectChanges::-webkit-scrollbar-thumb {
				background-color: #ccc;
				border-radius: 5px;
			}

				.projectChanges::-webkit-scrollbar-thumb:hover {
					background-color: #999;
				}

		.form-select[disabled] {
			background: #FBFCFC; /* Set background color to white */
		}

		.form-control[readonly] {
			background: #fff;
		}

		.input-container {
			position: relative;
		}

			.input-container input {
				padding-right: 30px; /* Adjust as needed to make space for the icon */
			}

			.input-container .icon {
				position: absolute;
				top: 50%;
				right: 10px; /* Adjust as needed to position the icon */
				transform: translateY(-50%);
				color: #888; /* Adjust icon color */
				font-size: 1.3rem;
			}


		#processedData {
			padding: 10px;
			font-size: 16px;
			border: 1px solid #ccc;
			border-radius: 5px;
			outline: none;
		}

		#rejectedData {
			padding: 10px;
			font-size: 16px;
			border: 1px solid #ccc;
			border-radius: 5px;
			outline: none;
		}



		.file-icons {
			display: none;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			text-align: center;
		}

			.file-icons a, .file-icons i {
				margin: 0 0.5rem;
				cursor: pointer;
			}

		.file-info:hover .file-header,
		.file-info:hover .file-name {
			display: none;
		}

		.file-info:hover .file-icons {
			display: flex;
		}

		.file-icons a, .file-icons i {
			margin-left: 5px;
			font-size: 20px;
			color: black;
			cursor: pointer;
		}

		.change-info {
			padding: 10px;
			margin-bottom:12px;
		}

			.change-info:not(:last-child) {
				border-bottom: 1px solid #ccc;
			}

		.delete-icon:hover {
			color: red;
		}

		.edit-icon:hover {
			color: blue;
		}

		.initials-circle {
			border: 1px solid gray;
			padding: 4px 8px;
			border-radius: 20%;
			background-color: #7986CB;
			color: white;
			display: inline-flex;
			align-items: center;
			justify-content: center;
			margin-right: 10px;
			font-weight: bold;
			font-size: 15px;
		}


		.bi-download:hover {
			color: green;
		}

		.bi-pencil:hover {
			color: blue;
		}

		.bi-trash:hover {
			color: red;
		}

		.cke_bottom {
			background-color: #fff;
			border-top:none;
			display:none;
		}

		.cke_top {
			background-color: #fff;
		}

		.cke{
			padding: 0 !important; /* Ensure no padding */
			margin-top: 10px !important;
			margin-bottom: 10px !important;
		}


	</style>
	<title>Tasks</title>

</head>

<body>

	<div class="card mt-2">
		<form id="taskForm" method="post" action="@Url.Action("UpdateTask", "Tasks")">
			<div class="card-head" style="border-bottom:1px solid gray; padding:10px 20px;">
				<div class="row">
					<div class="col-9" style="text-align:start;">
						<h3> @Model.ProjectID</h3>

						<input type="hidden" id="project-id" value="@Model.ProjectID" />
						<input type="hidden" id="project-name" value="@Model.Project" />
						<span><strong>Created By </strong><span style="color:blue">@Model.CreatedBy</span><span> on @Model.StartDate.ToString("MM/dd/yyyy")</span></span>
					</div>
					<div class="col-3" style="text-align:end;">
						@if (Context.Session.GetString("UserName") == Model.Assignee || Context.Session.GetString("UserRole") == "Super Admin" || Context.Session.GetString("UserName") == Model.CreatedBy)
						{

							<input type="hidden" name="projectId" value="@Model.ProjectID" />
							@if (Model.Flag == "True")
							{

								@if (Context.Session.GetString("UserRole") == "Super Admin" || Context.Session.GetString("UserName") == Model.CreatedBy || Model.Status != "Done")
								{
									<a id="editBtn" class="btn"><i class="bi bi-pencil-square"></i></a>
								}

								<a href="#" id="deleteTaskBtn" class="btn"><i id="delete" class="bi bi-trash"></i></a>
							}

						}
						@* <a id="close" href="/Tasks/Tasks"><i class="bi bi-x-square-fill" style="font-size:20px; color:#FC0606"></i> </a> *@


					</div>
				</div>


			</div>
			<div class="card-body" style="padding:10px;">

				<div class="row" style="padding:10px">
					<div class="col-9">
						<input type="hidden" name="ProjectID" value="@Model.ProjectID">
						<input type="text" id="summaryInput" asp-for="Summary" value="@Model.Summary" class="summary form-control" readonly>
						@* <textarea id="descriptionTextArea" asp-for="Description" class="description form-control mt-3" rows="12" readonly>@Model.Description @Model.EndDate</textarea> *@
						<textarea id="descriptionTextArea" asp-for="Description">@Model.Description</textarea>
						@* <div id="richEditor" class="description form-control mt-3" style="height: 300px; display:none;"></div> *@


						<div class="mb-3 uploadfiletask">
							<input type="file" name="file" id="fileInput" class="form-control" style="display: none;" onchange="uploadFile(this)" />

							<label for="fileInput" style="cursor: pointer;">
								<i class="ri-attachment-2" style="color:blue"></i>
								Click here to upload files
							</label>
						</div>



						@if (ViewBag.Filepath != null && ViewBag.Filepath.Count > 0)
						{
							<div class="mt-3">
								<div class="file-names-container">
									@foreach (string filePath in ViewBag.Filepath)
									{
										string newfilePath = filePath;
										newfilePath = filePath.Replace("file:", string.Empty);
										var file = System.IO.Path.GetFileName(filePath);
										var filename = System.IO.Path.GetFileNameWithoutExtension(filePath);
										var fileExtension = System.IO.Path.GetExtension(filePath).TrimStart('.').ToUpper();
										<div class="file-info" style="position: relative; display: inline-block; background:#D9F8EB;">
											<div class="file-header" style="font-weight: 500;">@fileExtension</div>
											<span class="file-name" style="font-weight: normal;">@filename</span>
											<div class="file-icons">
												<a href="@Url.Action("DownloadFile", "Tasks", new { filePath = filePath })">
													<i class="bi bi-download" style="margin-right: 8px; cursor: pointer; "></i>
												</a>
												<i class="bi bi-pencil" style="margin-right: 8px; cursor: pointer;" onclick="openEditFileModal('@Model.Project','@Model.ProjectID','@file','TaskFile')"></i>
												<i class="bi bi-trash" style="cursor: pointer; " onclick="deleteFile('@file','@Model.ProjectID','@Model.Project','TaskFile')"></i>
											</div>
										</div>
									}
								</div>
							</div>
						}


						<div class="row" id="commentrow" style="padding:10px; display: none; margin-top:20px;">
							<div class="projectChanges" id="updated_Comments" style=" margin-bottom:10px;">
								<span id="projectChanges"></span>
							</div>
						</div>



						@if (Model.Flag == "True")
						{
							<div class="row" id="commentsrow" style="padding: 0px; margin-top:20px;">
								<div class="col-12">
									<textarea id="comments" class="form-control mb-2" style="height:auto !important;" autocomplete="off" placeholder="Add Comments"></textarea>
									<div class="mb-3">
										<input type="file" name="file" id="commentfileInput" class="form-control" style="display: none;" onchange="uploadFile(this)" />

										<label for="commentfileInput" style="cursor: pointer;">
											<i class="ri-attachment-2" style="color:blue"></i>
											Click here to upload files
										</label>
									</div>
									<input type="hidden" id="projectId" name="projectId" value="@Model.ProjectID" />
									<a id="addcomment" class="btn btn-primary btn-sm">Add Comment</a>
								</div>
							</div>

							<script>
								CKEDITOR.replace('comments', {
									 
									contentsCss: 'body { font-size: 15px; }',
									height: 100
								});

								CKEDITOR.instances.comments.on('instanceReady', function () {
									var editorContainer = CKEDITOR.instances.comments.container.$;
									editorContainer.style.borderRadius = '5px';
									editorContainer.style.marginBottom = '10px'; // Add margin-bottom
								});

								document.addEventListener("DOMContentLoaded", function () {
									var addCommentBtn = document.getElementById("addcomment");

									function toggleAddCommentButton() {
										var editorData = CKEDITOR.instances.comments.getData();
										console.log(editorData);
										if (editorData.trim() !== "") {
											addCommentBtn.disabled = false;
											addCommentBtn.classList.remove("disabled");
										} else {
											addCommentBtn.disabled = true;
											addCommentBtn.classList.add("disabled");
										}
									}

									// Initially disable the button
									toggleAddCommentButton();

									// Listen to changes in the CKEditor instance
									CKEDITOR.instances.comments.on('change', function () {
										toggleAddCommentButton();
									});
								});
							</script>
						}

					</div>
					<div class="col-3">
						<div style="box-shadow: 0 0 5px rgba(117, 117, 117, 0.5); border-radius:5px; padding:20px;">
							<div class="dropdown-container">
								<label for="project-dropdown" style="font-weight:500;">Project</label>
								<select id="project-dropdown" class="form-select mb-2" asp-for="Project" disabled>
									@* <option value="" selected disabled hidden>Choose Project</option> *@
									@foreach (var project in ViewBag.Projects)
									{
										if (Model.Project == project)
										{
											<option value="@project" selected>@project</option>
										}
										else
										{
											<option value="@project">@project</option>
										}
									}
								</select>
							</div>
							<div class="dropdown-container">
								<label for="project-dropdown">Type</label>
								<select id="type-dropdown" class="form-select mb-2" asp-for="Type" disabled>
									@* <option value="" selected disabled hidden>Choose Project</option> *@
									@foreach (var type in new List<string> { "Development", "Data Processing" })
									{
										if (Model.Type == type)
										{
											<option value="@type" selected>@type</option>
										}
										else
										{
											<option value="@type">@type</option>
										}
									}
								</select>
							</div>


							<div class="dropdown-container">
								<label for="assignee-dropdown">Assignee</label>
								<select id="assignee-dropdown" class="form-select mb-2" asp-for="Assignee" disabled>
									<option value="" selected disabled hidden>Choose Assignee</option>
									@foreach (var assignee in ViewBag.Assignees)
									{
										if (Model.Assignee == assignee)
										{
											<option value="@assignee" selected>@assignee</option>
										}
										else
										{
											<option value="@assignee">@assignee</option>
										}

									}
								</select>
							</div>

							<div class="dropdown-container">
								<label for="status-dropdown">Status</label>
								<select id="status-dropdown" class="form-select mb-2" asp-for="Status" disabled>
									<option value="" selected disabled hidden>Choose Status</option>
									@foreach (var status in new List<string> { "Open", "In Progress", "To Verify", "Done", "On Hold" })
									{
										if (Model.Status == status)
										{
											<option value="@status" selected>@status</option>
										}
										else
										{
											<option value="@status">@status</option>
										}
									}
								</select>
							</div>

							<div class="dropdown-container">
								<label for="priority-dropdown">Priority</label>
								<select id="priority-dropdown" class="form-select mb-2" asp-for="Priority" disabled>
									<option value="" selected disabled hidden>Choose Priority</option>
									@foreach (var priority in new List<string> { "Major", "Minor", "Show Stopper", "Critical", "Normal" })
									{
										if (Model.Priority == priority)
										{
											<option value="@priority" selected>@priority</option>
										}
										else
										{
											<option value="@priority">@priority</option>
										}
									}
								</select>
							</div>
							<div class="dropdown-container">
								<label for="endDate">End Date</label>
								<div class="input-container">
									<input type="text" id="endDate" class="form-control mb-2" value="@Model.EndDate.ToString("dd-MMM-yyyy")" readonly>
									<i class="bi bi-calendar-day icon"></i>
								</div>
							</div>
							<div class="dropdown-container">
								<label for="estimated-days">Estimated Days</label>
								<div class="input-group mb-2">
									<input type="number" id="estimateddays" class="form-control " min="1" asp-for="EstimatedDays" readonly>
									<div class="input-group-append">
										<span class="input-group-text" style="margin-top:5px;">Day</span>
									</div>
								</div>
							</div>


						</div>
					</div>
				</div>
				@if (Context.Session.GetString("UserName") == Model.Assignee || Context.Session.GetString("UserRole") == "Super Admin" || Context.Session.GetString("UserName") == Model.CreatedBy)
				{
					<div class="row" style="padding:20px;">
						<div class="col-6" id="saveCancelButtons" style="display: none;">
							<button id="saveChanges" class="btn btn-primary btn-sm">Save</button>
							<a id="cancelbtn" class="btn btn-outline btn-sm"><strong>Cancel</strong></a>
						</div>
						<div class="col-3" style="text-align:end;">
						</div>
						<div class="col-3"></div>
					</div>
				}
			</div>
		</form>


		@if (TempData["SuccessMessage"] != null)
		{
			<script>
				alert("@TempData["SuccessMessage"]");
			</script>
		}

		@if (TempData["ErrorMessage"] != null)
		{
			<script>
				alert("@TempData["ErrorMessage"]");
			</script>
		}

		
		

			<form id="myForm">
			<div id="myModal" class="modal-dialog modal-dialog-centered modal-dialog-scrollable"  >
					<div class="modal-content">
						<div class="modal-header" style="border-bottom:1px solid gray; display: flex; justify-content: space-between;">
							<h3>Data count for @TempData["ProjectID"]</h3>

						</div>
						<div class="modal-body">
							<div class="row mt-2">
								<div class="col">
									<div class="form-group">
										<label for="processedData">Processed Data Count</label>
										<input type="number" class="form-control" id="processedData" required inputmode="numeric" placeholder="Enter numeric value">

									</div>
								</div>
							</div>
							<div class="row mt-2">
								<div class="col">
									<div class="form-group">
										<label for="rejectedData">Rejected Data Count</label>
										<input type="number" class="form-control" id="rejectedData" required inputmode="numeric" placeholder="Enter numeric value">
									</div>
								</div>
							</div>
							<div class="row mt-2">
								<div class="col">
									<div class="form-group">
										<label for="statename">State</label>
										<select class="form-select" id="state-dropdown" required>
											<!-- Options will be added dynamically using JavaScript -->
										</select>
									</div>
								</div>
							</div>
						</div>
						<div class="modal-footer">
						<button type="button" class="btn btn-primary" id="submitBtn" style="margin-right:15px">OK</button>
							<button type="button" class="btn btn-danger" id="closebtn" >Close</button>
						</div>
					</div>
				</div>

			</form>

		

	</div>
	 

	<!-- Modal -->
	<div class="modal fade" id="editFileModal" tabindex="-1" aria-labelledby="editFileModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<form id="editFileForm" method="post">
					<div class="modal-header">
						<h5 class="modal-title" id="editFileModalLabel">Edit File</h5>
					</div>
					<div class="modal-body">
						<div class="form-group">
							<label for="filenameInput">New Filename</label>
							<input type="text" class="form-control" id="filenameInput" name="newFilename" value="">
						</div>
						<input type="hidden" id="originalFilenameInput" name="originalFilename" value="">
						<input type="hidden" id="projectIdInput" name="projectId" value="">
						<input type="hidden" id="projectInput" name="project" value="">
						<input type="hidden" id="fileTypeInput" name="fileType" value="TaskFile">
					</div>
					<div class="modal-footer">
						<button type="button" id="cancelBtn" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-primary">Save</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	<script>
		function openEditFileModal(project, projectId, file, fileType) {
			// Set the values in the modal
			var filenameWithoutExtension = file.replace(/\.[^/.]+$/, "");
			document.getElementById('filenameInput').value = filenameWithoutExtension;
			document.getElementById('originalFilenameInput').value = file;
			document.getElementById('projectIdInput').value = projectId;
			document.getElementById('projectInput').value = project;
			document.getElementById('fileTypeInput').value = fileType;

			document.getElementById("cancelBtn").addEventListener("click", function () {

				$('#editFileModal').modal('hide');
			});
			// Set the form action URL
			document.getElementById('editFileForm').action = `/Tasks/EditUploadFile`;

			// Open the modal
			$('#editFileModal').modal('show');
		}
	</script>
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			var textareaContent = document.getElementById('descriptionTextArea').value;
			var decodedContent = decodeHtml(textareaContent);
			CKEDITOR.replace('descriptionTextArea', {
				readOnly: true,
				height: '300px',
				 
				contentsCss: ['https://fonts.googleapis.com/css2?family=Solway:wght@400;700&display=swap',   
					'body { font-size: 20px; }']
			}).setData(decodedContent);
			CKEDITOR.instances.descriptionTextArea.on('instanceReady', function () {
				var editorContainer = CKEDITOR.instances.descriptionTextArea.container.$;
				editorContainer.style.borderRadius = '5px';
				editorContainer.style.marginTop = '10px';
			});
		});

		function decodeHtml(html) {
			var txt = document.createElement("textarea");
			txt.innerHTML = html;
			return txt.value;
		}
	</script>

	<script>
		document.getElementById("fileInput").addEventListener("change", function () {
			var fileInput = this;
			var file = fileInput.files[0]; // Get the selected file

			// Get projectID and project values from your HTML or wherever they are stored
			var projectID = document.getElementById("project-id").value;
			console.log(projectID);
			var project = document.getElementById("project-name").value;
			console.log(project);

			// Create a FormData object
			var formData = new FormData();
			formData.append('file', file);
			formData.append('projectID', projectID); // Append projectID
			formData.append('project', project); // Append project
			// Append the file to FormData object


			// Send the AJAX request
			var xhr = new XMLHttpRequest();
			xhr.open("POST", "/Tasks/Uploadtaskfile"); // Assuming "Tasks" is the controller and "Upload" is the action
			xhr.onload = function () {
				if (xhr.status === 200) {
					var response = JSON.parse(xhr.responseText);
					if (response.filePath) {
						console.log(response.message);

						console.log("File uploaded successfully. File path:", response.filePath);
						window.location.reload();
					} else {
						console.error("File upload failed.");
					}
				} else {
					console.error("File upload failed with status:", xhr.status);
				}
				// Reset the file input
				fileInput.value = '';
			};
			xhr.send(formData);
		});
		document.getElementById("commentfileInput").addEventListener("change", function () {
			var fileInput = this;
			var file = fileInput.files[0]; // Get the selected file

			// Get projectID and project values from your HTML or wherever they are stored
			var projectID = document.getElementById("project-id").value;
			console.log(projectID);
			var project = document.getElementById("project-name").value;
			console.log(project);

			// Create a FormData object
			var formData = new FormData();
			formData.append('file', file);
			formData.append('projectID', projectID); // Append projectID
			formData.append('project', project); // Append project
			// Append the file to FormData object


			// Send the AJAX request
			var xhr = new XMLHttpRequest();
			xhr.open("POST", "/Tasks/Uploadcommentfile"); // Assuming "Tasks" is the controller and "Upload" is the action
			xhr.onload = function () {
				if (xhr.status === 200) {
					var response = JSON.parse(xhr.responseText);
					if (response.filePath) {
						console.log(response.message);

						console.log("File uploaded successfully. File path:", response.filePath);
						window.location.reload();
					} else {
						console.error("File upload failed.");
					}
				} else {
					console.error("File upload failed with status:", xhr.status);
				}
				// Reset the file input
				fileInput.value = '';
			};
			xhr.send(formData);
		});


	</script>


	<div id="deleteConfirmationModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
				</div>
				<div class="modal-body">
					Are you sure you want to delete this task?
				</div>
				<div class="modal-footer">
					<a href="@Model.ProjectID" id="cancelBtn" class="btn btn-secondary">Cancel</a>
					<a href="#"id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
				</div>
			</div>
		</div>
	</div>

	<!-- Include jQuery and Bootstrap JS -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


	<script>
		document.addEventListener('DOMContentLoaded', function () {
			// Show the modal when delete button is clicked
			document.getElementById("deleteTaskBtn").addEventListener("click", function (event) {
				event.preventDefault();
				$('#deleteConfirmationModal').modal('show');
			});

			// Attach event listener to handle the modal hide and log to console
			$('#deleteConfirmationModal').on('hidden.bs.modal', function () {
				console.log('Modal has been hidden');
				// You can uncomment the next line to redirect to the previous page after confirming the modal hides correctly
				// history.back();  // Redirect to the previous page
			});

			// Hide the modal when cancel button is clicked
			document.getElementById("cancelBtn").addEventListener("click", function (event) {
				event.preventDefault();
				$('#deleteConfirmationModal').modal('hide');
			});

			// Redirect to delete URL when confirm delete button is clicked
			document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
				var deleteUrl = '@Url.Action("Delete", "Tasks", new { id = Model.ProjectID })';
				window.location.href = deleteUrl;
			});
		});
	</script>






	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

	<script>

		$(document).ready(function () {
			// Check if there are comments present
			if ($("#projectChanges").text().trim().length > 0) {
				$("#commentrow").show(); // Show the row if comments are present
			}
		});
	</script>


	<script>
		function deleteFile(filename, projectID, project, fileType) {
			// Encode the filename to make it URL-safe
			var decodedFilename = decodeURIComponent(filename);
			var url = `/Tasks/DeleteUploadedFile`;

			$.ajax({
				url: url,
				type: 'POST',
				data: {
					filename: decodedFilename,
					projectID: projectID,
					project: project,
					fileType: fileType
				},
				success: function (response) {
					// Handle success response
					// alert('File deleted successfully');

					$(`#file-${projectID}`).remove();
					location.reload();
				},
				error: function (xhr, status, error) {
					// Handle error response
					alert('Error deleting file: ' + error);
				}
			});
		}

	</script>


	@* Functionality of Add Comment button *@
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			var commentsTextarea = document.getElementById("comments");
			var addCommentBtn = document.getElementById("addcomment");

			// Function to enable/disable the addcomment button
			function toggleAddCommentButton() {
				if (commentsTextarea.value.trim() !== "") {
					addCommentBtn.disabled = false;
					addCommentBtn.classList.remove("disabled");
				} else {
					addCommentBtn.disabled = true;
					addCommentBtn.classList.add("disabled");
				}
			}

			toggleAddCommentButton();

			commentsTextarea.addEventListener("input", function () {
				toggleAddCommentButton();
			});
		});
	</script>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
			var projectChangesDiv = document.getElementById("updated_Comments");
			projectChangesDiv.scrollTop = projectChangesDiv.scrollHeight;
		});
	</script>

	@* Add Comment Code *@

	<script>
		document.getElementById('addcomment').addEventListener('click', function () {
			var comment = CKEDITOR.instances.comments.getData(); // Get the data from CKEditor instance
			console.log(comment);
			var projectId = document.getElementById('projectId').value;
			var data = {
				Comment: comment,
				ProjectId: projectId
			};

			var xhr = new XMLHttpRequest();
			xhr.open('POST', '/Tasks/InsertData', true);
			xhr.setRequestHeader('Content-Type', 'application/json');
			xhr.onreadystatechange = function () {
				if (xhr.readyState === 4) {
					if (xhr.status === 200) {
						location.reload();
						console.log('Comment added successfully.');
					} else {
						console.error('Failed to add comment.');
					}
				}
			};
			xhr.send(JSON.stringify(data));
		});
	</script>

	@* Display Updates and Comments *@

	<script>
		$.ajax({
			url: "/Tasks/ProjectChanges?projectId=@Model.ProjectID",
			type: "GET",
			dataType: "json",
			success: function (data) {
				$("#projectChanges").empty();

				data.forEach(function (item) {
					var changeInfo = $("<div>").addClass("change-info"); // Add a class for styling

					var initials = getInitials(item.userName);

					// Create a circle with initials
					var userInitials = $("<span>").addClass("initials-circle").text(initials).css({ "color": "#fff" });
					changeInfo.append(userInitials);

					var userName = $("<b>").text(item.userName);
					changeInfo.append(userName);

					if ("commentText" in item) {
						changeInfo.append(" Commented on ");
					} else {
						changeInfo.append(" Updated on ");
					}

					var time = $("<span>").text(formatDate(item.time)).css({ "color": "gray", "font-size": "small" }).addClass("time");
					changeInfo.append(time);

					var username = "@Context.Session.GetString("UserName")";
					var userrole = "@Context.Session.GetString("UserRole")";
					console.log(username);
					console.log(userrole);
					if ("commentText" in item && (item.userName === username || userrole === "Super Admin")) {
						var editicon = $("<i>").addClass("bi bi-pencil edit-icon").css({ "cursor": "pointer", "margin-left": "20px" }).click(function () {
							var id = item.commentId;
							var commentTextSpan = $("#commentText_" + id);
							var originalText = commentTextSpan.html();

							// Create a textarea with the current comment text
							var textarea = $("<textarea>").addClass("form-control").val(originalText);

							// Create a save button
							var saveButton = $("<a>").addClass("btn btn-primary btn-sm mt-2").text("Save").click(function () {
								var editedText = CKEDITOR.instances["editor_" + id].getData();

								$.ajax({
									url: "/Tasks/EditComment",
									type: "POST",
									data: {
										id: id,
										commentText: editedText
									},
									success: function (response) {
										console.log("Comment edited successfully");

										commentTextSpan.html(editedText);
										// Remove the textarea and save button
										textarea.remove();
										saveButton.remove();
										cancelButton.remove();
										// Destroy the CKEditor instance
										CKEDITOR.instances["editor_" + id].destroy();
										// Show the edit icon again
										editicon.show();
										location.reload();
									},
									error: function (xhr, status, error) {
										console.error(error);
									}
								});
							});

							var cancelButton = $("<a>").addClass("btn btn-secondary btn-sm mt-2 ml-2").text("Cancel").css({ "margin-right": "10px" }).click(function () {
								// Replace the textarea with the original comment text span
								textarea.replaceWith(commentTextSpan);
								// Remove the save and cancel buttons
								saveButton.remove();
								cancelButton.remove();
								// Destroy the CKEditor instance
								CKEDITOR.instances["editor_" + id].destroy();
								// Show the edit icon again
								editicon.show();
							});

							// Replace the comment text span with the textarea
							commentTextSpan.replaceWith(textarea);
							// Hide the edit icon
							editicon.hide();
							// Append the save button after the textarea
							textarea.after(saveButton).after(cancelButton);

							// Initialize CKEditor
							textarea.attr("id", "editor_" + id);
							CKEDITOR.replace("editor_" + id, {
								height: 60,
								 
								contentsCss: 'body { font-size: 13px; }'
							});
						}).hide();
						changeInfo.append(editicon);
						

					}
					if ("commentText" in item && (item.userName === username || userrole === "Super Admin")) {
						var deleteIcon = $("<i>").addClass("bi bi-trash delete-icon").css({ "cursor": "pointer", "margin-left": "20px" }).click(function () {
							var comment = item.commentText;
							var time = item.time;
							var id = item.commentId;

							$.ajax({
								url: "/Tasks/Deletecomment",
								type: "POST",
								data: {
									comment: comment,
									projectId: '@Model.ProjectID',
									time: time,
									id: id
								},
								success: function (response) {
									console.log("Comment deleted successfully");
									// Reload the page
									location.reload();
								},
								error: function (xhr, status, error) {
									console.error(error);
								}
							});

						}).hide(); // Initially hide delete icon
						changeInfo.append(deleteIcon);
					}

					changeInfo.hover(function () {
						//$(this).css("box-shadow", "0 4px 8px rgba(0, 0, 0, 0.2)");
						$(this).css({
							"box-shadow": "0 4px 8px rgba(0, 0, 0, 0.2)",
							"transform": "translateY(-10px)" // Move the section up by 5px
						});
						$(this).find(".delete-icon").show();
						$(this).find(".edit-icon").show();
					}, function () {
						// Hide delete icon when not hovered
						//$(this).css("box-shadow", "none");
						$(this).css({
							"box-shadow": "none",
							"transform": "translateY(0)" // Return the section to its original position
						});
						//$(this).css("bockground-color", "transparant");
						$(this).find(".delete-icon").hide();
						$(this).find(".edit-icon").hide();
					});

					changeInfo.append("<br>");

					if ("field" in item && "oldValue" in item && "newValue" in item) {
						if (item.newValue == "Done") {
							var fieldChange = $("<span>")
								.text(item.field + ": " + item.oldValue + " -> " + item.newValue)
								.css({ "margin-left": "45px", "display": "block", "border-bottom": "1px solid #fff", "padding-bottom": "8px" });

							var projectid = document.getElementById('projectId').value;
							console.log(projectid)
							changeInfo.append(fieldChange);
							$.ajax({
								url: '@Url.Action("GetProjectDataCounts", "Tasks")', // Replace 'YourController' with your controller name
								type: 'GET',
								data: {
									projectID: projectid // Replace 'yourProjectID' with the actual project ID value
								},
								success: function (response) {
									// Populate table rows with data from the response
									response.forEach(function (data) {
										var stateNameSpan = $("<span>")
											.html("<strong>State:</strong> " + data.stateName)
											.css({ "margin-left": "45px", "display": "block", "margin-top": "10px" });
										var processedCountSpan = $("<span>")
											.html("<strong>Processed Data:</strong> " + data.processedCount)
											.css({ "margin-left": "45px", "display": "block" });
										var rejectedCountSpan = $("<span>")
											.html("<strong>Rejected Data:</strong> " + data.rejectedCount)
											.css({ "margin-left": "45px", "display": "block" });
										changeInfo.append(stateNameSpan);
										changeInfo.append(processedCountSpan);
										changeInfo.append(rejectedCountSpan);
									});


								},
								error: function (xhr, status, error) {
									console.error("Error fetching data from the database:", error);
								}
							});



						}
						else {
							var fieldChange = $("<span>").text(item.field + ": " + item.oldValue + " -> " + item.newValue).css({ "margin-left": "45px" });
							changeInfo.append(fieldChange);
						}

					} else if ("commentText" in item) {
						var commentText = $("<div>").attr("id", "commentText_" + item.commentId).html('<div style="margin-left: 45px;">' + item.commentText + '</div>').addClass("comments");
						changeInfo.append(commentText);
						 
					}

					$("#projectChanges").append(changeInfo);
				});

			},
			error: function (xhr, status, error) {
				console.error(error);
			}
		});

		function getInitials(name) {
			var initials = name.split(" ").map(function (word) {
				return word.charAt(0).toUpperCase();
			}).join("");
			return initials;
		}

		function formatDate(date) {
			var d = new Date(date);
			var day = d.getDate().toString().padStart(2, '0');
			var month = (d.getMonth() + 1).toString().padStart(2, '0');
			var year = d.getFullYear();
			return day + '-' + month + '-' + year;
		}





	</script>

	@* Dropdown for modal *@

	<script>

		var states = [
			"N/A",
			"Andaman and Nicobar Islands",
			"Andhra Pradesh",
			"Arunachal Pradesh",
			"Assam",
			"Bihar",
			"Chhattisgarh",
			"Chandigarh",
			"Daman and Diu",
			"Delhi",
			"Dadra and Nagar Haveli",
			"Goa",
			"Gujarat",
			"Himachal Pradesh",
			"Haryana",
			"Jammu and Kashmir",
			"Jharkhand",
			"Kerala",
			"Karnataka",
			"Lakshadweep",
			"Meghalaya",
			"Maharashtra",
			"Manipur",
			"Madhya Pradesh",
			"Mizoram",
			"Nagaland",
			"Odisha",
			"Punjab",
			"Puducherry",
			"Rajasthan",
			"Sikkim",
			"Tamil Nadu",
			"Tripura",
			"Uttarakhand",
			"Uttar Pradesh",
			"West Bengal",
			"Telangana",
			"Ladakh"
			// Add more states and union territories as needed
		];

		function populateDropdown() {
			var select = document.getElementById("state-dropdown");

			select.innerHTML = "";

			var defaultOption = document.createElement("option");
			defaultOption.text = "Select State";
			defaultOption.value = "";
			select.appendChild(defaultOption);

			states.forEach(function (state) {
				var option = document.createElement("option");
				option.text = state;
				option.value = state;
				select.appendChild(option);
			});
		}

		populateDropdown();
	</script>

	@* Data Count Upadtion in DB *@



	<script>
				document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded event fired');

    var saveChangesButton = document.getElementById('saveChanges');
    var submitButton = document.getElementById('submitBtn');
    var closeModalButton = document.getElementById('closebtn');
    var taskForm = document.getElementById('taskForm');
    var modal = document.getElementById('myModal');
    var processedDataInput = document.getElementById('processedData');
    var rejectedDataInput = document.getElementById('rejectedData');
    var stateDropdown = document.getElementById('state-dropdown');

    console.log('saveChangesButton:', saveChangesButton);
    console.log('submitButton:', submitButton);
    console.log('closeModalButton:', closeModalButton);

    if (!saveChangesButton) {
        console.error('Save Changes button not found!');
        return;
    }

    if (!submitButton) {
        console.error('Submit button not found!');
        return;
    }

    if (!closeModalButton) {
        console.error('Close button not found!');
        return;
    }

    // Close button handler for the modal
    closeModalButton.addEventListener('click', function() {
        console.log('Close button clicked');
        modal.classList.remove('show');
        modal.style.display = 'none';
    });

    // Save Changes button handler for the task form
    saveChangesButton.addEventListener('click', function(event) {
        event.preventDefault();
        console.log('saveChanges button clicked');
        var projectType = document.getElementById('type-dropdown').value;
        var status = document.getElementById('status-dropdown').value;

        if (projectType === 'Data Processing' && status === 'Done') {
            modal.classList.add('show');
            modal.style.display = 'block';
        } else {
            taskForm.submit();
        }
    });

    // Submit button handler for the data count form
    submitButton.addEventListener('click', function(event) {
        event.preventDefault();
        console.log('Submit button clicked');

        // Remove previous error messages
        var errorMessages = document.querySelectorAll('.error-message');
        errorMessages.forEach(function(msg) {
            msg.remove();
        });

        var processedData = processedDataInput.value.trim();
        var rejectedData = rejectedDataInput.value.trim();
        var project = '@Model.Project'; // Ensure this is correct
        var projectID = '@Model.ProjectID'; // Ensure this is correct
        var assignee = '@Model.Assignee'; // Ensure this is correct
        var selectedState = stateDropdown.value;

        var isValid = true;

        // Validate processedData
        if (!/^\d+$/.test(processedData)) {
            var errorMessage = document.createElement('p');
            errorMessage.className = 'error-message';
            errorMessage.style.color = 'red';
            errorMessage.textContent = 'Enter a valid numeric value';
            processedDataInput.parentNode.appendChild(errorMessage);
            isValid = false;
        }

        // Validate rejectedData
        if (!/^\d+$/.test(rejectedData)) {
            var errorMessage = document.createElement('p');
            errorMessage.className = 'error-message';
            errorMessage.style.color = 'red';
            errorMessage.textContent = 'Enter a valid numeric value';
            rejectedDataInput.parentNode.appendChild(errorMessage);
            isValid = false;
        }

        // Validate state selection
        if (!selectedState || selectedState.trim() === '') {
            var errorMessage = document.createElement('p');
            errorMessage.className = 'error-message';
            errorMessage.style.color = 'red';
            errorMessage.textContent = 'Please select a state';
            stateDropdown.parentNode.appendChild(errorMessage);
            isValid = false;
        }

        // If validation fails, return false
        if (!isValid) {
            console.log('Validation failed');
            return false;
        }

        // If validation passes, make the AJAX request to submit the data count form
        $.ajax({
            url: "/Tasks/InsertFormData",
            type: "POST",
            dataType: "json",
            data: {
                processedData: processedData,
                rejectedData: rejectedData,
                project: project,
                projectID: projectID,
                assignee: assignee,
                state: selectedState
            },
            success: function (response) {
                if (response.success) {
                    alert("Data inserted successfully!");
                    $('#myForm')[0].reset();
                    $("#myModal").modal('hide');
                    // Submit the task form after successful submission of the modal form
                    $("#taskForm").submit();
                } else {
                    alert("Failed to insert data into the database.");
                }
            },
            error: function (xhr, status, error) {
                alert("An error occurred while processing your request.");
            }
        });
    });
});




	</script>


	@*Modal for Data Count *@

	@* <script>
		var modal = document.getElementById("myModal");
		var closeButton = document.querySelector("#closebtn");

		window.onload = function () {
			modal.style.display = "block";
		};

		closeButton.addEventListener("click", function () {
			modal.style.display = "none";
		});

		window.onclick = function (event) {
			if (event.target == modal) {
				modal.style.display = "block";
			}
		};
	</script> *@

	@*Edit Button functionality*@
	@* <script>
	$(document).ready(function () {
	$("#editBtn").click(function () {
	$("#summaryInput").prop("readonly", function (i, v) {
	return !v;
	});
	$("#descriptionTextArea").prop("readonly", function (i, v) {
	return !v;
	});
	// $(".form-select").prop("disabled", function (i, v) {
	// 	return !v;
	// });
	$("#assignee-dropdown").prop("disabled", function (i, v) {
	return !v;
	});
	$("#status-dropdown").prop("disabled", function (i, v) {
	return !v;
	});
	$("#priority-dropdown").prop("disabled", function (i, v) {
	return !v;
	});
	$("#estimateddays").prop("disabled", function (i, v) {
	return !v;
	});
	$("#saveCancelButtons").show();
	$(this).hide();
	$("#commentsrow").hide();
	$("#commentrow").hide();
	});

	$("#cancelbtn").click(function () {
	$("#summaryInput").prop("readonly", true);
	$("#descriptionTextArea").prop("readonly", true);
	$(".form-select").prop("disabled", true);
	// $("#assignee-select").prop("disabled", true);
	// $("#status-select").prop("disabled", true);
	// $("#priority-select").prop("disabled", true);
	$("#estimateddays").prop("disabled", true);
	$("#editBtn").show();
	$("#saveCancelButtons").hide();
	$("#commentsrow").show();
	$("#commentrow").show();
	});
	});
	</script>  *@
	<script>
		$(document).ready(function () {
			/*$("#editBtn").click(function () {
				// Make CKEditor editable
				CKEDITOR.instances.descriptionTextArea.setReadOnly(false);
				// Other input fields handling
				$("#summaryInput").prop("readonly", function (i, v) {
					return !v;
				});
				$("#assignee-dropdown, #status-dropdown, #priority-dropdown").prop("disabled", function (i, v) {
					return !v;
				});
				$("#estimateddays").prop("disabled", function (i, v) {
					return !v;
				});
				$("#saveCancelButtons").show();
				$(this).hide();
				$("#commentsrow, #commentrow").hide();
			});*/
			let assigneeChanged = false;
			let statusChanged = false;

			function checkEnablePriority() {
				if (assigneeChanged && statusChanged) {
					$("#priority-dropdown").prop("disabled", false);
				}
			}
			$('.uploadfiletask').hide();
			$("#editBtn").click(function () {
				// Make CKEditor editable
				CKEDITOR.instances.descriptionTextArea.setReadOnly(false);
				$('.uploadfiletask').show();

				// Other input fields handling
				$("#summaryInput").prop("readonly", function (i, v) {
					return !v;
				});
				$("#assignee-dropdown, #status-dropdown, #estimateddays").prop("disabled", function (i, v) {
					return !v;
				});

				$("#saveCancelButtons").show();
				$(this).hide();
				$("#commentsrow, #commentrow").hide();

			});

			$("#assignee-dropdown").change(function () {
				assigneeChanged = true;
				checkEnablePriority();
			});

			$("#status-dropdown").change(function () {
				statusChanged = true;
				checkEnablePriority();
			});

			$("#cancelbtn").click(function () {
				// Make CKEditor non-editable
				CKEDITOR.instances.descriptionTextArea.setReadOnly(true);
				// Other input fields handling
				$('.uploadfiletask').hide();
				$("#summaryInput").prop("readonly", true);
				$(".form-select").prop("disabled", true);
				$("#estimateddays").prop("disabled", true);
				$("#editBtn").show();
				$("#saveCancelButtons").hide();
				$("#commentsrow, #commentrow").show();
			});

			// Initialize CKEditor
			CKEDITOR.replace('descriptionTextArea', {
				readOnly: true
			});
		});
	</script>




</body>

</html>