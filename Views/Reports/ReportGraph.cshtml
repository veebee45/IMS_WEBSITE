@model List<IMSMIS.Models.TaskData>

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<title>Project Total Counts Graph</title>
	<link rel="stylesheet" href="~/css/print.css" media="print">
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
	<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
	<style>

		.card {
			border:none;
			flex: 1;
			/* box-shadow: 0 0 8px rgba(117, 117, 117, 0.5); */
			border-radius: 5px;
			overflow: hidden;
		}

			.card .card-head {
				color: black;
				padding: 10px;
			}


			.card .card-body {
				padding: 10px;
			}

		.graphbtn {
			position: relative;
			background-color: #fff;
			color: black;
			border: none;
			box-shadow: 0 0 10px rgba(117, 117, 117, 0.5);
			padding: 3px 20px;
			text-align: center;
			text-decoration: none;
			display: inline-block;
			font-size: 16px;
			margin: 5px 5px;
			cursor: pointer;
			justify-content: flex-end;
		}


			.graphbtn:hover {
				background: #A5B7F6;
				color: #fff;
				font-weight:600;
			}

		.filterdropdown {
			border: 1px solid gray;
			background: #fff;
			width: 150px;
			margin-left: 10px;
			border-radius: 8px;
		}

		.dropdown-menu {
			max-height: 300px;
			overflow-y: auto;
		}

		
	</style>



</head>
<body>





	<div class="card">
		<div class="card-head">
			@* style="border-bottom:1px solid black" *@
			<div class="row col-12">
				<div class="col" style="font-size:30px; font-weight:700;">@ViewBag.Description</div>
				<div class="col" style="text-align: end; margin-bottom: 10px; margin-top:15px;">
					<button class="graphbtn" id="PexportBtnExcel" style="border-radius:10px; margin-right: 10px;margin-bottom: 5px; margin-top:5px;">Excel Export</button>
					<button class="graphbtn" id="PexportBtnCsv" style="border-radius:10px; margin-right: 10px;margin-bottom: 5px;margin-top:5px;">Csv Export</button>
					@* <button class="graphbtn" id="PexportBtnPrintout" style="border-radius:10px; margin-right: 10px;margin-bottom: 5px;margin-top:5px;">Printout</button>
					<button class="graphbtn" id="PexportBtnMail" style="border-radius:10px; margin-right: 10px;margin-bottom: 5px;margin-top:5px;">Send Mail</button> *@
				</div>

			</div>
		</div>
		<div class="card-body">

			<canvas id="reportChart" style="width:100%;"></canvas>

		</div>


	</div>

	<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

	<script>
		// Retrieve data from model
		var Labels = [];
		var Data = [];
		@foreach (var item in Model)
		{
			if (@ViewBag.Description == "Issues Per Assignee")
			{
				<text>Labels.push('@item.Assignee  @item.TaskCount'); </text>
			}
			else if (@ViewBag.Description == "Issues Per Project")
			{
				<text>Labels.push('@item.Project'); </text>
			}
			<text>Data.push('@item.TaskCount'); </text>
		}

				// Adjust canvas height based on data length
		

		var chartType = '@ViewBag.Type'; // Get the chart type from ViewBag

		var canvas = document.getElementById('reportChart');
		if (chartType === 'pie') {
			canvas.style.width = '500px';
			canvas.style.height = '500px';
		} else {
			if (Labels.length < 5) {
				canvas.height = Labels.length * 80;
			} else {
				canvas.height = Labels.length * 50; // 50 pixels per data point
			}
		}

		var ctx = canvas.getContext('2d');


		var reportChart = new Chart(ctx, {
			type: chartType, // Set the chart type dynamically
			data: {
				labels: Labels,
				datasets: [{
					label: 'Total Counts',
					data: Data,
					backgroundColor: chartType === 'pie' ? [
						'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)',
						'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)',
						'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)',
						'rgba(255, 99, 64, 0.6)', 'rgba(54, 162, 132, 0.6)',
						'rgba(75, 206, 86, 0.6)', 'rgba(153, 192, 192, 0.6)',
						'rgba(255, 206, 255, 0.6)', 'rgba(255, 159, 132, 0.6)',
						'rgba(54, 102, 235, 0.6)', 'rgba(75, 159, 192, 0.6)',
						'rgba(153, 64, 255, 0.6)', 'rgba(255, 99, 192, 0.6)',
						'rgba(54, 206, 64, 0.6)', 'rgba(75, 102, 86, 0.6)',
						'rgba(153, 162, 192, 0.6)', 'rgba(255, 159, 255, 0.6)'
					] : [
						'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)',
						'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)',
						'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)',
						'rgba(255, 99, 64, 1)', 'rgba(54, 162, 132, 1)',
						'rgba(75, 206, 86, 1)', 'rgba(153, 192, 192, 1)',
						'rgba(255, 206, 255, 1)', 'rgba(255, 159, 132, 1)',
						'rgba(54, 102, 235, 1)', 'rgba(75, 159, 192, 1)',
						'rgba(153, 64, 255, 1)', 'rgba(255, 99, 192, 1)',
						'rgba(54, 206, 64, 1)', 'rgba(75, 102, 86, 1)',
						'rgba(153, 162, 192, 1)', 'rgba(255, 159, 255, 1)'
					],
					borderColor: chartType === 'pie' ? [
						'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)',
						'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)',
						'rgba(255, 99, 64, 0.2)', 'rgba(54, 162, 132, 0.2)',
						'rgba(75, 206, 86, 0.2)', 'rgba(153, 192, 192, 0.2)',
						'rgba(255, 206, 255, 0.2)', 'rgba(255, 159, 132, 0.2)',
						'rgba(54, 102, 235, 0.2)', 'rgba(75, 159, 192, 0.2)',
						'rgba(153, 64, 255, 0.2)', 'rgba(255, 99, 192, 0.2)',
						'rgba(54, 206, 64, 0.2)', 'rgba(75, 102, 86, 0.2)',
						'rgba(153, 162, 192, 0.2)', 'rgba(255, 159, 255, 0.2)'
					] : [
						'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)',
						'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)',
						'rgba(255, 99, 64, 0.2)', 'rgba(54, 162, 132, 0.2)',
						'rgba(75, 206, 86, 0.2)', 'rgba(153, 192, 192, 0.2)',
						'rgba(255, 206, 255, 0.2)', 'rgba(255, 159, 132, 0.2)',
						'rgba(54, 102, 235, 0.2)', 'rgba(75, 159, 192, 0.2)',
						'rgba(153, 64, 255, 0.2)', 'rgba(255, 99, 192, 0.2)',
						'rgba(54, 206, 64, 0.2)', 'rgba(75, 102, 86, 0.2)',
						'rgba(153, 162, 192, 0.2)', 'rgba(255, 159, 255, 0.2)'
					],
					borderWidth: 1
				}]
			},
			options: {
				interaction: {
					mode: 'index',
					intersect: true,
				},
				indexAxis: chartType === 'bar' ? 'y' : undefined,
				responsive: true,
				maintainAspectRatio: false,
				scales: chartType === 'bar' ? {
					x: {
						ticks: {
							color: 'black',
							font: {
								weight: 'bold'
							}
						},
						grid: {
							display: false
						}
					},
					y: {
						ticks: {
							color: 'black',
							font: {
								weight: 'bold',
								size: 14
							},
							grid: {
								display: false
							}
						}
					}
				} : {},
				plugins: {
					legend: {
						position: 'bottom',
						labels: {
							color: 'black',
							font: {
								weight: 'bold'
							},
							generateLabels: function (chart) {
								const data = chart.data;
								if (data.labels.length && data.datasets.length) {
									const dataset = data.datasets[0];
									const total = dataset.data.reduce((accumulator, currentValue) => accumulator + parseFloat(currentValue), 0);

									return data.labels.map((label, i) => {
										const value = dataset.data[i];
										const percentage = ((value / total) * 100).toFixed(2) + '%';
										return {
											text: `${label} (${percentage})`,
											fillStyle: dataset.backgroundColor[i],
											strokeStyle: dataset.backgroundColor[i],
											lineWidth: 1,
											hidden: isNaN(dataset.data[i]) || chart.getDatasetMeta(0).data[i].hidden,
											index: i
										};
									});
								}
								return [];
							}
						}
					}
				},
				barThickness: 30
			}
		});

		function exportToCsv(filename, label, rows) {
			var processRow = function (row) {
				return row.map(String).map(function (v) {
					return v.replace(/"/g, '""');
				}).join(',') + '\n';
			};

			var csvFile = label + ',Total Counts\n';
			rows.forEach(function (row) {
				csvFile += processRow(row);
			});

			var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
			if (navigator.msSaveBlob) { // IE 10+
				navigator.msSaveBlob(blob, filename);
			} else {
				var link = document.createElement("a");
				if (link.download !== undefined) { // feature detection
					var url = URL.createObjectURL(blob);
					link.setAttribute("href", url);
					link.setAttribute("download", filename);
					link.style.visibility = 'hidden';
					document.body.appendChild(link);
					link.click();
					document.body.removeChild(link);
				}
			}
		}

		// Function to export data to Excel
		function exportToExcel(filename, rows) {
			var ws = XLSX.utils.aoa_to_sheet(rows);
			var wb = XLSX.utils.book_new();
			XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
			XLSX.writeFile(wb, filename);
		}

		// Determine the label based on the description
		var dynamicLabel = "@ViewBag.Description" == "Issues Per Assignee" ? "Assignee" : "Project";

		document.getElementById('PexportBtnCsv').addEventListener('click', function () {
			var rows = Labels.map((label, index) => [label, Data[index]]);
			exportToCsv('data.csv', dynamicLabel, rows);
		});

		document.getElementById('PexportBtnExcel').addEventListener('click', function () {
			var rows = [[dynamicLabel, 'Total Counts'], ...Labels.map((label, index) => [label, Data[index]])];
			exportToExcel('data.xlsx', rows);
		});

		document.getElementById('PexportBtnPrintout').addEventListener('click', function () {
			window.print();
		});

	</script>

</body>
</html>
